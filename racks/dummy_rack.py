from device_repo import DeviceRack, DummyDeviceTemplate, DeviceType
from device_repo.utils import get_logger, get_rack_argv_parser, InvalidParameterException


# The Implementation of a Dummy Device.
# It inherits the DummyDeviceTemplate generated by ICE.
class DummyDev(DummyDeviceTemplate):
    def __init__(self, data):
        self.data = data

    def get_type(self, current=None):
        # This function implement the get_type method required by Device interface
        # in device_repo.ice. DummyDevice interface inherits Device.
        #
        # Note: current is a ICE parameters used to store newtork connection
        #       information. You don't have to use it, but do make it the last
        #       argument of an ICE method.

        return DeviceType.Dummy

    def get_data(self, current=None):
        # This function implement the get_get method required by DummyDevice
        # defined in Dummy.ice.
        return self.data


# Every device rack should implement a get_parser function, in order to be loaded
# from rack_starter.
# You should define your own commandline argument parser in this function.
def get_parser():
    # get_rack_argv_parser will create a argparse.ArgumentParser, with some
    # common rack arguments like the address to the host, the port it uses, etc.
    parser = get_rack_argv_parser("Start dummy rack for testing.")

    # Add arguments used in creating dummy devices.
    parser.add_argument("name_data", nargs="+", type=str,
                        help="name and dummy data of the dummy device, in the format of "
                             "{name}:{data} (multiple instances can be loaded)")
    return parser


# Every device rack should implement a load_dev function, in order to be loaded
# from rack_starter.
# Parsed commandline arguments(args) and a DeviceRack object will be passed to
# this function.
# You need to initialize all devices according to args, and use
#     rack.load_device({name}, {device})
# to load all devices to the rack.
def load_dev(rack, args=None, logger=None):
    import re
    for name_data in args.name_data:
        splited = re.match("(.+):(.+)", name_data)

        if not splited:
            raise InvalidParameterException

        dummy = DummyDev(splited[2].encode("utf-8") if args else b"Dummy data 1")
        rack.load_device(splited[1], dummy)


# This function is not necessary, it is put here just for testing purpose.
def start_dummy_rack(host, port, start_immediately=True, args=None):
    logger = get_logger()
    rack = DeviceRack("DummyRack", host, port, logger)

    load_dev(rack, args, logger)

    if start_immediately:
        rack.start()
    return rack


# If this module is not loaded by rack_starter, then it need to load itself.
if __name__ == "__main__":
    logger = get_logger()
    parser = get_parser()

    args = parser.parse_args()
    rack = DeviceRack("DummyRack", args.host, args.port, logger)

    load_dev(rack, args, logger)
    rack.start()

