# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.4
#
# <auto-generated>
#
# Generated from file `VNA.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
from . import device_repo_ice

# Included module device_repo_ice
_M_device_repo_ice = Ice.openModule('device_repo.device_repo_ice')

# Start of module device_repo_ice
__name__ = 'device_repo.device_repo_ice'

_M_device_repo_ice._t_VNA = IcePy.defineValue('::device_repo_ice::VNA', Ice.Value, -1, (), False, True, None, ())

if 'VNAPrx' not in _M_device_repo_ice.__dict__:
    _M_device_repo_ice.VNAPrx = Ice.createTempClass()
    class VNAPrx(_M_device_repo_ice.DevicePrx):

        def set_power(self, power_in_db, context=None):
            return _M_device_repo_ice.VNA._op_set_power.invoke(self, ((power_in_db, ), context))

        def set_powerAsync(self, power_in_db, context=None):
            return _M_device_repo_ice.VNA._op_set_power.invokeAsync(self, ((power_in_db, ), context))

        def begin_set_power(self, power_in_db, _response=None, _ex=None, _sent=None, context=None):
            return _M_device_repo_ice.VNA._op_set_power.begin(self, ((power_in_db, ), _response, _ex, _sent, context))

        def end_set_power(self, _r):
            return _M_device_repo_ice.VNA._op_set_power.end(self, _r)

        def get_power(self, context=None):
            return _M_device_repo_ice.VNA._op_get_power.invoke(self, ((), context))

        def get_powerAsync(self, context=None):
            return _M_device_repo_ice.VNA._op_get_power.invokeAsync(self, ((), context))

        def begin_get_power(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_device_repo_ice.VNA._op_get_power.begin(self, ((), _response, _ex, _sent, context))

        def end_get_power(self, _r):
            return _M_device_repo_ice.VNA._op_get_power.end(self, _r)

        def set_frequency_center(self, freq_in_hz, context=None):
            return _M_device_repo_ice.VNA._op_set_frequency_center.invoke(self, ((freq_in_hz, ), context))

        def set_frequency_centerAsync(self, freq_in_hz, context=None):
            return _M_device_repo_ice.VNA._op_set_frequency_center.invokeAsync(self, ((freq_in_hz, ), context))

        def begin_set_frequency_center(self, freq_in_hz, _response=None, _ex=None, _sent=None, context=None):
            return _M_device_repo_ice.VNA._op_set_frequency_center.begin(self, ((freq_in_hz, ), _response, _ex, _sent, context))

        def end_set_frequency_center(self, _r):
            return _M_device_repo_ice.VNA._op_set_frequency_center.end(self, _r)

        def get_frequency_center(self, context=None):
            return _M_device_repo_ice.VNA._op_get_frequency_center.invoke(self, ((), context))

        def get_frequency_centerAsync(self, context=None):
            return _M_device_repo_ice.VNA._op_get_frequency_center.invokeAsync(self, ((), context))

        def begin_get_frequency_center(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_device_repo_ice.VNA._op_get_frequency_center.begin(self, ((), _response, _ex, _sent, context))

        def end_get_frequency_center(self, _r):
            return _M_device_repo_ice.VNA._op_get_frequency_center.end(self, _r)

        def set_frequency_start(self, freq_in_hz, context=None):
            return _M_device_repo_ice.VNA._op_set_frequency_start.invoke(self, ((freq_in_hz, ), context))

        def set_frequency_startAsync(self, freq_in_hz, context=None):
            return _M_device_repo_ice.VNA._op_set_frequency_start.invokeAsync(self, ((freq_in_hz, ), context))

        def begin_set_frequency_start(self, freq_in_hz, _response=None, _ex=None, _sent=None, context=None):
            return _M_device_repo_ice.VNA._op_set_frequency_start.begin(self, ((freq_in_hz, ), _response, _ex, _sent, context))

        def end_set_frequency_start(self, _r):
            return _M_device_repo_ice.VNA._op_set_frequency_start.end(self, _r)

        def get_frequency_start(self, context=None):
            return _M_device_repo_ice.VNA._op_get_frequency_start.invoke(self, ((), context))

        def get_frequency_startAsync(self, context=None):
            return _M_device_repo_ice.VNA._op_get_frequency_start.invokeAsync(self, ((), context))

        def begin_get_frequency_start(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_device_repo_ice.VNA._op_get_frequency_start.begin(self, ((), _response, _ex, _sent, context))

        def end_get_frequency_start(self, _r):
            return _M_device_repo_ice.VNA._op_get_frequency_start.end(self, _r)

        def set_frequency_stop(self, freq_in_hz, context=None):
            return _M_device_repo_ice.VNA._op_set_frequency_stop.invoke(self, ((freq_in_hz, ), context))

        def set_frequency_stopAsync(self, freq_in_hz, context=None):
            return _M_device_repo_ice.VNA._op_set_frequency_stop.invokeAsync(self, ((freq_in_hz, ), context))

        def begin_set_frequency_stop(self, freq_in_hz, _response=None, _ex=None, _sent=None, context=None):
            return _M_device_repo_ice.VNA._op_set_frequency_stop.begin(self, ((freq_in_hz, ), _response, _ex, _sent, context))

        def end_set_frequency_stop(self, _r):
            return _M_device_repo_ice.VNA._op_set_frequency_stop.end(self, _r)

        def get_frequency_stop(self, context=None):
            return _M_device_repo_ice.VNA._op_get_frequency_stop.invoke(self, ((), context))

        def get_frequency_stopAsync(self, context=None):
            return _M_device_repo_ice.VNA._op_get_frequency_stop.invokeAsync(self, ((), context))

        def begin_get_frequency_stop(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_device_repo_ice.VNA._op_get_frequency_stop.begin(self, ((), _response, _ex, _sent, context))

        def end_get_frequency_stop(self, _r):
            return _M_device_repo_ice.VNA._op_get_frequency_stop.end(self, _r)

        def get_s(self, channel, context=None):
            return _M_device_repo_ice.VNA._op_get_s.invoke(self, ((channel, ), context))

        def get_sAsync(self, channel, context=None):
            return _M_device_repo_ice.VNA._op_get_s.invokeAsync(self, ((channel, ), context))

        def begin_get_s(self, channel, _response=None, _ex=None, _sent=None, context=None):
            return _M_device_repo_ice.VNA._op_get_s.begin(self, ((channel, ), _response, _ex, _sent, context))

        def end_get_s(self, _r):
            return _M_device_repo_ice.VNA._op_get_s.end(self, _r)

        def set_num_of_points(self, num_of_points, context=None):
            return _M_device_repo_ice.VNA._op_set_num_of_points.invoke(self, ((num_of_points, ), context))

        def set_num_of_pointsAsync(self, num_of_points, context=None):
            return _M_device_repo_ice.VNA._op_set_num_of_points.invokeAsync(self, ((num_of_points, ), context))

        def begin_set_num_of_points(self, num_of_points, _response=None, _ex=None, _sent=None, context=None):
            return _M_device_repo_ice.VNA._op_set_num_of_points.begin(self, ((num_of_points, ), _response, _ex, _sent, context))

        def end_set_num_of_points(self, _r):
            return _M_device_repo_ice.VNA._op_set_num_of_points.end(self, _r)

        def get_num_of_points(self, context=None):
            return _M_device_repo_ice.VNA._op_get_num_of_points.invoke(self, ((), context))

        def get_num_of_pointsAsync(self, context=None):
            return _M_device_repo_ice.VNA._op_get_num_of_points.invokeAsync(self, ((), context))

        def begin_get_num_of_points(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_device_repo_ice.VNA._op_get_num_of_points.begin(self, ((), _response, _ex, _sent, context))

        def end_get_num_of_points(self, _r):
            return _M_device_repo_ice.VNA._op_get_num_of_points.end(self, _r)

        def sweep_on(self, context=None):
            return _M_device_repo_ice.VNA._op_sweep_on.invoke(self, ((), context))

        def sweep_onAsync(self, context=None):
            return _M_device_repo_ice.VNA._op_sweep_on.invokeAsync(self, ((), context))

        def begin_sweep_on(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_device_repo_ice.VNA._op_sweep_on.begin(self, ((), _response, _ex, _sent, context))

        def end_sweep_on(self, _r):
            return _M_device_repo_ice.VNA._op_sweep_on.end(self, _r)

        def sweep_off(self, context=None):
            return _M_device_repo_ice.VNA._op_sweep_off.invoke(self, ((), context))

        def sweep_offAsync(self, context=None):
            return _M_device_repo_ice.VNA._op_sweep_off.invokeAsync(self, ((), context))

        def begin_sweep_off(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_device_repo_ice.VNA._op_sweep_off.begin(self, ((), _response, _ex, _sent, context))

        def end_sweep_off(self, _r):
            return _M_device_repo_ice.VNA._op_sweep_off.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_device_repo_ice.VNAPrx.ice_checkedCast(proxy, '::device_repo_ice::VNA', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_device_repo_ice.VNAPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::device_repo_ice::VNA'
    _M_device_repo_ice._t_VNAPrx = IcePy.defineProxy('::device_repo_ice::VNA', VNAPrx)

    _M_device_repo_ice.VNAPrx = VNAPrx
    del VNAPrx

    _M_device_repo_ice.VNA = Ice.createTempClass()
    class VNA(_M_device_repo_ice.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::device_repo_ice::Device', '::device_repo_ice::VNA')

        def ice_id(self, current=None):
            return '::device_repo_ice::VNA'

        @staticmethod
        def ice_staticId():
            return '::device_repo_ice::VNA'

        def set_power(self, power_in_db, current=None):
            raise NotImplementedError("servant method 'set_power' not implemented")

        def get_power(self, current=None):
            raise NotImplementedError("servant method 'get_power' not implemented")

        def set_frequency_center(self, freq_in_hz, current=None):
            raise NotImplementedError("servant method 'set_frequency_center' not implemented")

        def get_frequency_center(self, current=None):
            raise NotImplementedError("servant method 'get_frequency_center' not implemented")

        def set_frequency_start(self, freq_in_hz, current=None):
            raise NotImplementedError("servant method 'set_frequency_start' not implemented")

        def get_frequency_start(self, current=None):
            raise NotImplementedError("servant method 'get_frequency_start' not implemented")

        def set_frequency_stop(self, freq_in_hz, current=None):
            raise NotImplementedError("servant method 'set_frequency_stop' not implemented")

        def get_frequency_stop(self, current=None):
            raise NotImplementedError("servant method 'get_frequency_stop' not implemented")

        def get_s(self, channel, current=None):
            raise NotImplementedError("servant method 'get_s' not implemented")

        def set_num_of_points(self, num_of_points, current=None):
            raise NotImplementedError("servant method 'set_num_of_points' not implemented")

        def get_num_of_points(self, current=None):
            raise NotImplementedError("servant method 'get_num_of_points' not implemented")

        def sweep_on(self, current=None):
            raise NotImplementedError("servant method 'sweep_on' not implemented")

        def sweep_off(self, current=None):
            raise NotImplementedError("servant method 'sweep_off' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_device_repo_ice._t_VNADisp)

        __repr__ = __str__

    _M_device_repo_ice._t_VNADisp = IcePy.defineClass('::device_repo_ice::VNA', VNA, (), None, (_M_device_repo_ice._t_DeviceDisp,))
    VNA._ice_type = _M_device_repo_ice._t_VNADisp

    VNA._op_set_power = IcePy.Operation('set_power', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_double, False, 0),), (), None, ())
    VNA._op_get_power = IcePy.Operation('get_power', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_double, False, 0), ())
    VNA._op_set_frequency_center = IcePy.Operation('set_frequency_center', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_double, False, 0),), (), None, ())
    VNA._op_get_frequency_center = IcePy.Operation('get_frequency_center', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_double, False, 0), ())
    VNA._op_set_frequency_start = IcePy.Operation('set_frequency_start', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_double, False, 0),), (), None, ())
    VNA._op_get_frequency_start = IcePy.Operation('get_frequency_start', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_double, False, 0), ())
    VNA._op_set_frequency_stop = IcePy.Operation('set_frequency_stop', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_double, False, 0),), (), None, ())
    VNA._op_get_frequency_stop = IcePy.Operation('get_frequency_stop', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_double, False, 0), ())
    VNA._op_get_s = IcePy.Operation('get_s', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), _M_device_repo_ice._t_doubles, False, 0), ())
    VNA._op_set_num_of_points = IcePy.Operation('set_num_of_points', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    VNA._op_get_num_of_points = IcePy.Operation('get_num_of_points', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_double, False, 0), ())
    VNA._op_sweep_on = IcePy.Operation('sweep_on', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    VNA._op_sweep_off = IcePy.Operation('sweep_off', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_device_repo_ice.VNA = VNA
    del VNA

# End of module device_repo_ice
