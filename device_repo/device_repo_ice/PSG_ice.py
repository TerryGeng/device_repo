# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.4
#
# <auto-generated>
#
# Generated from file `PSG.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
from . import device_repo_ice

# Included module device_repo_ice
_M_device_repo_ice = Ice.openModule('device_repo.device_repo_ice')

# Start of module device_repo_ice
__name__ = 'device_repo.device_repo_ice'

_M_device_repo_ice._t_PSG = IcePy.defineValue('::device_repo_ice::PSG', Ice.Value, -1, (), False, True, None, ())

if 'PSGPrx' not in _M_device_repo_ice.__dict__:
    _M_device_repo_ice.PSGPrx = Ice.createTempClass()
    class PSGPrx(_M_device_repo_ice.DevicePrx):

        def set_frequency(self, freq_in_hz, context=None):
            return _M_device_repo_ice.PSG._op_set_frequency.invoke(self, ((freq_in_hz, ), context))

        def set_frequencyAsync(self, freq_in_hz, context=None):
            return _M_device_repo_ice.PSG._op_set_frequency.invokeAsync(self, ((freq_in_hz, ), context))

        def begin_set_frequency(self, freq_in_hz, _response=None, _ex=None, _sent=None, context=None):
            return _M_device_repo_ice.PSG._op_set_frequency.begin(self, ((freq_in_hz, ), _response, _ex, _sent, context))

        def end_set_frequency(self, _r):
            return _M_device_repo_ice.PSG._op_set_frequency.end(self, _r)

        def get_frequency(self, context=None):
            return _M_device_repo_ice.PSG._op_get_frequency.invoke(self, ((), context))

        def get_frequencyAsync(self, context=None):
            return _M_device_repo_ice.PSG._op_get_frequency.invokeAsync(self, ((), context))

        def begin_get_frequency(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_device_repo_ice.PSG._op_get_frequency.begin(self, ((), _response, _ex, _sent, context))

        def end_get_frequency(self, _r):
            return _M_device_repo_ice.PSG._op_get_frequency.end(self, _r)

        def set_power(self, power_in_db, context=None):
            return _M_device_repo_ice.PSG._op_set_power.invoke(self, ((power_in_db, ), context))

        def set_powerAsync(self, power_in_db, context=None):
            return _M_device_repo_ice.PSG._op_set_power.invokeAsync(self, ((power_in_db, ), context))

        def begin_set_power(self, power_in_db, _response=None, _ex=None, _sent=None, context=None):
            return _M_device_repo_ice.PSG._op_set_power.begin(self, ((power_in_db, ), _response, _ex, _sent, context))

        def end_set_power(self, _r):
            return _M_device_repo_ice.PSG._op_set_power.end(self, _r)

        def get_power(self, context=None):
            return _M_device_repo_ice.PSG._op_get_power.invoke(self, ((), context))

        def get_powerAsync(self, context=None):
            return _M_device_repo_ice.PSG._op_get_power.invokeAsync(self, ((), context))

        def begin_get_power(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_device_repo_ice.PSG._op_get_power.begin(self, ((), _response, _ex, _sent, context))

        def end_get_power(self, _r):
            return _M_device_repo_ice.PSG._op_get_power.end(self, _r)

        def stop(self, context=None):
            return _M_device_repo_ice.PSG._op_stop.invoke(self, ((), context))

        def stopAsync(self, context=None):
            return _M_device_repo_ice.PSG._op_stop.invokeAsync(self, ((), context))

        def begin_stop(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_device_repo_ice.PSG._op_stop.begin(self, ((), _response, _ex, _sent, context))

        def end_stop(self, _r):
            return _M_device_repo_ice.PSG._op_stop.end(self, _r)

        def run(self, context=None):
            return _M_device_repo_ice.PSG._op_run.invoke(self, ((), context))

        def runAsync(self, context=None):
            return _M_device_repo_ice.PSG._op_run.invokeAsync(self, ((), context))

        def begin_run(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_device_repo_ice.PSG._op_run.begin(self, ((), _response, _ex, _sent, context))

        def end_run(self, _r):
            return _M_device_repo_ice.PSG._op_run.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_device_repo_ice.PSGPrx.ice_checkedCast(proxy, '::device_repo_ice::PSG', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_device_repo_ice.PSGPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::device_repo_ice::PSG'
    _M_device_repo_ice._t_PSGPrx = IcePy.defineProxy('::device_repo_ice::PSG', PSGPrx)

    _M_device_repo_ice.PSGPrx = PSGPrx
    del PSGPrx

    _M_device_repo_ice.PSG = Ice.createTempClass()
    class PSG(_M_device_repo_ice.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::device_repo_ice::Device', '::device_repo_ice::PSG')

        def ice_id(self, current=None):
            return '::device_repo_ice::PSG'

        @staticmethod
        def ice_staticId():
            return '::device_repo_ice::PSG'

        def set_frequency(self, freq_in_hz, current=None):
            raise NotImplementedError("servant method 'set_frequency' not implemented")

        def get_frequency(self, current=None):
            raise NotImplementedError("servant method 'get_frequency' not implemented")

        def set_power(self, power_in_db, current=None):
            raise NotImplementedError("servant method 'set_power' not implemented")

        def get_power(self, current=None):
            raise NotImplementedError("servant method 'get_power' not implemented")

        def stop(self, current=None):
            raise NotImplementedError("servant method 'stop' not implemented")

        def run(self, current=None):
            raise NotImplementedError("servant method 'run' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_device_repo_ice._t_PSGDisp)

        __repr__ = __str__

    _M_device_repo_ice._t_PSGDisp = IcePy.defineClass('::device_repo_ice::PSG', PSG, (), None, (_M_device_repo_ice._t_DeviceDisp,))
    PSG._ice_type = _M_device_repo_ice._t_PSGDisp

    PSG._op_set_frequency = IcePy.Operation('set_frequency', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_double, False, 0),), (), None, ())
    PSG._op_get_frequency = IcePy.Operation('get_frequency', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_double, False, 0), ())
    PSG._op_set_power = IcePy.Operation('set_power', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_double, False, 0),), (), None, ())
    PSG._op_get_power = IcePy.Operation('get_power', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_double, False, 0), ())
    PSG._op_stop = IcePy.Operation('stop', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    PSG._op_run = IcePy.Operation('run', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_device_repo_ice.PSG = PSG
    del PSG

# End of module device_repo_ice
